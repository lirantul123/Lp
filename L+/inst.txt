This project implements a basic interpreter that can execute a limited set of instructions written in a custom language(L+). 
Here's a breakdown of its functionalities and limitations:


What it can do:
Execute code: 
It reads code line by line from the user and interprets instructions.

Variable declaration: 
    You can declare variables (var) and assign integer values to them.

Printing: 
    You can use the print statement to display the value of a variable or the result of a math expression.

Simple math expressions:
    It can evaluate basic math expressions involving addition ('+'), subtraction ('-'), multiplication ('*'), and division ('/') using variables or numbers.

Conditional statements (if):
    It supports if statements to execute code blocks based on conditions like greater than ('>'), less than ('<'), or equal to ('=') comparisons between variables or numbers.

Functions: 
    You can define functions (fun) with arguments, &it supports function calls.

Loops:
    While loops and For loops are in progress.

Clear screen & exit:
    It offers a basic "clear screen" functionality, although it doesn't truly clear the terminal buffer(I think) & and exit the interpreter.

Comment argument:
    You can decide to write sentance as a comment, and it will not be executed('/').


What it cannot do yet:
Data types beyond integers:
    Currently, it only supports integer(&~double) variables and values. Operations involving floating-point numbers (decimals) wouldn't work.

Complex data structures:    
    It doesn't handle data structures like arrays, strings, or objects.

Error handling ~ (except for division by zero):
    It doesn't handle many potential errors like accessing non-existent variables, using invalid operators, or attempting operations on incompatible data types (e.g., dividing a string by a number).
