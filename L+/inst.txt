This project implements a basic interpreter that can execute a limited set of instructions written in a custom language. 
Here's a breakdown of its functionalities and limitations:


What it can do:
Execute code: 
It reads code line by line from the user and interprets instructions.

Variable declaration: 
    You can declare variables (var) and assign integer values to them.

Printing: 
    You can use the print statement to display the value of a variable or the result of a math expression.

Simple math expressions:
    It can evaluate basic math expressions involving addition (+), subtraction (-), multiplication (*), and division (/) using variables or numbers.

Conditional statements (if):
    It supports if statements to execute code blocks based on conditions like greater than (>), less than (<), or equal to (=) comparisons between variables or numbers.

Functions (limited definition): 
    You can define functions (fun) with arguments, but currently, it doesn't support function calls or implementing function logic within the definition.

Clear screen (limited) & exit:
    It offers a basic "clear screen" functionality by printing multiple newlines, although it doesn't truly clear the terminal buffer.


What it cannot do yet:
Data types beyond integers:
    Currently, it only supports integer(&~double) variables and values. Operations involving floating-point numbers (decimals) wouldn't work.

Complex data structures:    
    It doesn't handle data structures like arrays, strings, or objects.
Function calls:
    While you can define functions, you cannot call them within your code.

Function logic within definition:
    The current fun definition only stores argument names, not the actual function body or logic.

Error handling (except for division by zero):
    It doesn't handle many potential errors like accessing non-existent variables, using invalid operators, or attempting operations on incompatible data types (e.g., dividing a string by a number).

Overall:
    This project provides a foundation for building a more comprehensive interpreter. 
    It demonstrates concepts like variable handling, basic math operations, conditional statements,
    and function definition (partially). With further development,
    it could become a more powerful tool for executing more complex code.
